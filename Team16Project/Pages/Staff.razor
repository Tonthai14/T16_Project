@page "/staff"

@using DataLibrary
@using DataLibrary.Models
@using Team16Project.Models
@using Microsoft.Extensions.Configuration
@inject IDataAccess _data
@inject IConfiguration _config

<h3>Staff Information</h3>

@if (staff == null)
{
    <p><em>Loading staff information...</em></p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Job</th>
                <th>Employee ID</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var employee in staff)
            {
                if (employee.IsBeingEdited)
                {
                    <tr>
                        <td>
                            <input type="text" class="form-control" placeholder="@employee.FirstName" @bind="@employee.FirstName" />
                        </td>
                        <td>
                            <input type="text" class="form-control" placeholder="@employee.LastName" @bind="@employee.LastName" />
                        </td>
                        <td>
                            <input type="text" class="form-control" placeholder="@employee.Job" @bind="@employee.Job" />
                        </td>
                        <td>@employee.StaffId</td>
                        <td>
                            <button type="button" class="btn btn-primary" @onclick="@(() => UpdateStaff(employee))">
                                Save
                            </button>
                        </td>
                        <td>
                            <button type="button" class="btn btn-primary" @onclick="@(() => EnableEdit(false, employee))">
                                Cancel
                            </button>
                        </td>
                    </tr>
                }
                else
                {
                    <tr>
                        <td>@employee.FirstName</td>
                        <td>@employee.LastName</td>
                        <td>@employee.Job</td>
                        <td>@employee.StaffId</td>
                        <td>
                            <button type ="button" class="btn btn-primary" @onclick="@(() => EnableEdit(true, employee))">
                                Edit
                            </button>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
}

<h4>Add a new employee</h4>
<EditForm Model="@newStaff" OnValidSubmit="@InsertStaff">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="col-12 row">
        <input class="form-control col-4" @bind="newStaff.FirstName" placeholder="First Name" />
        <input class="form-control col-4" @bind="newStaff.LastName" placeholder="Last Name" />
        <input class="form-control col-2" @bind="newStaff.Job" placeholder="Job" />
        <button type="submit" class="btn btn-primary">Add Employee</button>
    </div>
</EditForm>

@code {
    List<StaffModel> staff;
    private DisplayStaffModel newStaff = new DisplayStaffModel();

    private void EnableEdit(bool flag, StaffModel staff)
    {
        staff.IsBeingEdited = flag;
    }

    private async Task InsertStaff()
    {
        string query = "INSERT INTO STAFF (FirstName, LastName, Job, PARK_ParkId) VALUES (@FirstName, @LastName, @Job, 0);";

        await _data.SaveData(query,
            new { FirstName = newStaff.FirstName, LastName = newStaff.LastName, Job = newStaff.Job },
            _config.GetConnectionString("default"));
        // Get StaffId of most recent database entry in STAFF table
        string getId = "SELECT StaffId FROM STAFF ORDER BY CreateDate DESC LIMIT 1;";
        List<int> id = await _data.LoadData<int, dynamic>(getId,
            new { FirstName = newStaff.FirstName, LastName = newStaff.LastName, Job = newStaff.Job },
            _config.GetConnectionString("default"));
        StaffModel employee = new StaffModel
        {
            FirstName = newStaff.FirstName,
            LastName = newStaff.LastName,
            Job = newStaff.Job,
            StaffId = id.ElementAt(0) // List should only contain single employee ID
        };
        staff.Add(employee);
        // Reset so new employee variable has clean slate of information
        newStaff = new DisplayStaffModel();
    }

    private async Task UpdateStaff(StaffModel staff)
    {
        EnableEdit(false, staff);
        string query = "UPDATE STAFF SET FirstName = @FirstName, LastName = @LastName, Job = @Job WHERE StaffId = @StaffId";

        await _data.SaveData(query,
            new { FirstName = staff.FirstName, LastName = staff.LastName, Job = staff.Job, StaffId = staff.StaffId },
            _config.GetConnectionString("default"));

        await OnInitializedAsync();
    }

    private async Task DeleteStaff()
    {
        string query = "DELETE FROM STAFF WHERE StaffId = @StaffId";

    }

    protected override async Task OnInitializedAsync()
    {
        string query = "SELECT * FROM STAFF";

        staff = await _data.LoadData<StaffModel, dynamic>(query, new { }, _config.GetConnectionString("default"));
    }
}